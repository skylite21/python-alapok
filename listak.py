
# listak keszitese

# ez egy √ºres lista:
a = []
# string-eket tartalmaz√≥ sz√∂veg
b = ['valami', 'szoveg']

# vegyes t√≠pusokat tartalmaz√≥ sz√∂veg
c = ['valami', 42, True]
# list√°t list√°ba is tehet√ºnk.
d = ['kutya', [4, 3, 5], ['a']]
e = [[], [], [['a', 'b', 'c', ['x', 'y']]]]
# a b list√°b√≥l kiv√°lasztja a m√°sodik elemet
# a list√°kat null√°t√≥l indexelj√ºk
print(b[1])

print(c[2])

# list√°b√≥l list√°t kiv√°lasztani:
print(d[2][0])
print(e[2][0][3][1])

# list√°hoz elemet az append-el hozz√°adni mindig a lista legv√©g√©re!
a.append('szoveg1')
# az append f√ºggv√©nyt a list√°n lehet megh√≠vni
a.append('szoveg2')

print(a)

a = [2, 4, 6, 8, 10, 12, 14, 16, 18]

# ha tartom√°nyt v√°lasztunk ki, akkor kett≈ësponttal v√°lasztjuk el
# t√≥l:ig (ahol a fels≈ë korl√°t az exclusive)
# a t√≥l: inclusive
print(a[2:5])
print(a[5:8])
print(a[1:7])
print(a[3:8])

# ha nem adunk als√≥ vagy fels≈ë korl√°tot:
print(a[2:])
print(a[:5])

print(a[:])  # = print(a)

# ha m√©g egy kett≈ëspontot be√≠runk akkor azt adjuk meg hogy
# hanyass√°val k√©rj√ºk az elemeket
# PL :4-edik elemt≈ël lefele mindet k√©rem, de kettess√©vel
print(a[:4:2])

# megford√≠tja a list√°t:
print(a[::-1])

# megford√≠tja a list√°t √©s kettess√©vel adja vissza az elemeket:
print(a[::-2])

# h√°tu√≥lr√≥l is lehet elemet kiv√°lasztani:
# pl legutols√≥ elem:
print(a[-1])


# ha egy pontos helyre akarjuk az elemet beilleszteni:
# pl: a 3-adik elem el√© berakunk egy 'a' stringet
a.insert(3, 'a')
print(a)

# elemet kivenni a lista legv√©g√©r≈ël
# ha kell, akkor a pop f√ºggv√©y vissza is adja
# azt az elemet amit kit√∂r√∂l
last = a.pop()
print(a)
print(last)

# ha adunk param√©tert a pop-nak akkor az az
# index, azon az indexen l√©v≈ë elemet kiveszi:
a.pop(1)
print(a)

# egy konkr√©t elemet kivenni (√©rt√©k alapj√°n)
a.remove('a')
print(a)

# ez errort dobna mert az elem m√°r nincs benne a list√°ban
# a.remove('a')

# hanyadik elem a 10-es:
print(a.index(10))

# megsz√°moljuk a 2-eseket a list√°ban:
b = [2, 2, 4, 3, 2, 2, 2, 2]
print("{} darab kettes sz√°m van a 'b' list√°ban".format(b.count(2)))


# list√°k n√∂vekv≈ë sorba rendez√©se:
c = [3, 7, 5, 12, 9]
c.sort()
print(c)

# string elemek eset√©n abc sorrendbe rendez
d = ['laci', 'bela', 'tibi', 'kati']
# ha a reverse flag-et True-ra √°ll√≠tjuk akkor ford√≠tott sorrendbe
# rendez:
d.sort(reverse=True)
print(d)

# megvoford√≠tani a sorrendet:
a = [2, 4, 6, 8, 10, 12, 14, 16, 18]
a.reverse()
print(a)

x = ['h', 'e', 'l', 'l', 'o']
x.reverse()
print(x)

# kit√∂r√∂lni list√°b√≥l minden elemet:
x.clear()  # vagy:  x = []
print(x)

# list√°kat √∂sszef≈±zni:
a = [2, 4, 6, 8, 10, 12, 14, 16, 18]
x = ['h', 'e', 'l', 'l', 'o']
print(x + a)
# az a list√°t hozz√°f≈±zz√ºk az x list√°hoz:
x.extend(a)
print('A lista √∂sszef≈ëzve met√≥dussal: {}'.format(x))

a = [2, 4, 6, 8, 10, 12, 14, 16, 18]
x = ['h', 'e', 'l', 'l', 'o']
# zip: cipz√°r..
print(list(zip(x, a)))


s = 'this is my string'
# list√°v√° konvert√°lni:
my_string_list = list(s)
print(my_string_list)


# list√°t l√©trehozni stringb≈ël:
my_string_list = s.split(' ')
print(my_string_list)

s = '123-345-454'
my_string_list = s.split('-')
print(my_string_list)

# √∂sszeolvasztani list√°t stringg√©:
# √∫gy hogy megmondjuk hogy mi legyen k√∂z√∂tte
my_string = '*'.join(x)
print(my_string)
my_string = 'SZIA'.join(x)
print(my_string)
my_string = ''.join(x)
print(my_string)

# a join met√≥dus csak olyan t√∂mb√∂kkel tud dolgozni
# ami string-eket tartalmaz
# my_string = '*'.join(a)    # << ERROR!

#                            üëáüèªlist comprehension!
my_string = '*'.join([str(item) for item in a])
print(my_string)

# list comprehension kifejtve for ciklussal:
result = []
for item in a:
    # result list√°ba beletessz√ºk az 'a' lista
    # minden elem√©t, stringg√© alak√≠tva:
    result.append(str(item))
# a result lista ugyanazt tartalmazza mint az 'a' lista
# csak int t√≠pusok helyett string-ek vannak benne:
print(result)
